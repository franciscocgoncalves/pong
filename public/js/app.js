// Generated by CoffeeScript 1.9.1
var Ball, Object, Player,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object = (function() {
  function Object(el) {
    this.el = el;
  }

  Object.prototype.x = function(x) {
    if (x != null) {
      this.el.css("left", x);
    }
    return parseFloat(this.el.css("left"));
  };

  Object.prototype.y = function(y) {
    if (y != null) {
      this.el.css("bottom", y);
    }
    return parseFloat(this.el.css("bottom"));
  };

  Object.prototype.width = function() {
    return this.el.width();
  };

  Object.prototype.height = function() {
    return this.el.height();
  };

  Object.prototype.left = function() {
    return this.x();
  };

  Object.prototype.right = function() {
    return this.x() + this.width();
  };

  Object.prototype.up = function() {
    return this.y() + this.height();
  };

  Object.prototype.down = function() {
    return this.y();
  };

  Object.prototype.checkColision = function(o) {
    if ((o.left() >= this.left() && o.left() <= this.right() || o.right() <= this.right() && o.right() >= this.left()) && (o.up() <= this.up() && o.up() >= this.down() || o.down() >= this.down() && o.down() <= this.up())) {
      return true;
    }
    return false;
  };

  return Object;

})();

Player = (function(superClass) {
  extend(Player, superClass);

  function Player() {
    return Player.__super__.constructor.apply(this, arguments);
  }

  return Player;

})(Object);

$(function() {
  var player1;
  player1 = new Player($("#player1"));
  console.log(player1.x());
  return setTimeout((function() {
    return player1.x(100);
  }), 2000);
});

Ball = (function(superClass) {
  extend(Ball, superClass);

  function Ball() {
    return Ball.__super__.constructor.apply(this, arguments);
  }

  return Ball;

})(Object);
