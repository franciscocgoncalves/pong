// Generated by CoffeeScript 1.9.1
var Ball, Object, Player, events, host, keyCodes, leftPlayer, objects, paused, pongScreen, ready, rightPlayer, scores, socket, updateScores,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object = (function() {
  function Object(el) {
    this.el = el;
    this.restart();
  }

  Object.prototype.color = function(color) {
    if (color != null) {
      return this.el.css("background-color", color);
    } else {
      return this.el.css("background-color");
    }
  };

  Object.prototype.x = function(x) {
    if (x != null) {
      this.el.css("left", x + "px");
    }
    return parseFloat(this.el.css("left"));
  };

  Object.prototype.y = function(y) {
    if (y != null) {
      this.el.css("bottom", y + "px");
    }
    return parseFloat(this.el.css("bottom"));
  };

  Object.prototype.move = function(speed) {
    var finalX, finalY;
    speed = speed || this.speed || {
      x: 0,
      y: 0
    };
    finalY = this.y() + speed.y * this.delta / 1000;
    finalX = this.x() + speed.x * this.delta / 1000;
    if (finalY < 0) {
      this.y(0);
      this.collisionY();
    } else if (finalY + this.height() > pongScreen.height) {
      this.y(pongScreen.height - this.height());
      this.collisionY();
    } else {
      this.y(finalY);
    }
    if (finalX < 0) {
      this.x(0);
      return this.collisionX(leftPlayer);
    } else if (finalX + this.width() > pongScreen.width) {
      this.x(pongScreen.width - this.width());
      return this.collisionX(rightPlayer);
    } else {
      return this.x(finalX);
    }
  };

  Object.prototype.update = function() {
    if (this.updated == null) {
      this.updated = Date.now();
      return;
    }
    this.delta = Date.now() - this.updated;
    if (!events[keyCodes.p]) {
      this._update();
    }
    return this.updated = this.updated + this.delta;
  };

  Object.prototype._update = function() {};

  Object.prototype.width = function() {
    return this.el.width();
  };

  Object.prototype.height = function() {
    return this.el.height();
  };

  Object.prototype.left = function() {
    return this.x();
  };

  Object.prototype.right = function() {
    return this.x() + this.width();
  };

  Object.prototype.up = function() {
    return this.y() + this.height();
  };

  Object.prototype.down = function() {
    return this.y();
  };

  Object.prototype.checkCollision = function(o) {
    if (o.left() > this.right() || o.right() < this.left() || o.down() > this.up() || o.up() < this.down()) {
      return false;
    }
    return true;
  };

  Object.prototype.collisionX = function() {};

  Object.prototype.collisionY = function() {};

  Object.prototype.restart = function() {
    this.restartX();
    return this.restartY();
  };

  Object.prototype.restartX = function() {
    return this.x(pongScreen.width / 2 - this.width() / 2);
  };

  Object.prototype.restartY = function() {
    return this.y(pongScreen.height / 2 - this.height() / 2);
  };

  return Object;

})();

Player = (function(superClass) {
  extend(Player, superClass);

  function Player(el, self) {
    this.el = el;
    this.self = self;
    this.defaultSpeed = {
      x: 0,
      y: 400
    };
    this.speed = {
      x: 0,
      y: 400
    };
    Player.__super__.constructor.call(this, this.el);
    if (this.self != null) {
      this.x(20);
      this.color("green");
    } else {
      this.x(pongScreen.width - this.width() - 20);
      this.color("red");
    }
  }

  Player.prototype.moveUp = function() {
    return this.move({
      x: this.speed.x,
      y: this.speed.y
    });
  };

  Player.prototype.moveDown = function() {
    return this.move({
      x: this.speed.x,
      y: -this.speed.y
    });
  };

  Player.prototype._update = function() {
    if (this.self != null) {
      if (events[keyCodes.w]) {
        this.moveUp();
      }
      if (events[keyCodes.s]) {
        return this.moveDown();
      }
    } else {
      if (events.other[keyCodes.w]) {
        this.moveUp();
      }
      if (events.other[keyCodes.s]) {
        return this.moveDown();
      }
    }
  };

  Player.prototype.restart = function() {
    this.speed.x = this.defaultSpeed.x;
    this.speed.y = this.defaultSpeed.y;
    return this.restartY();
  };

  return Player;

})(Object);

Ball = (function(superClass) {
  extend(Ball, superClass);

  function Ball(el, speed1) {
    this.el = el;
    this.speed = speed1;
    Ball.__super__.constructor.call(this, this.el);
    this.defaultSpeed = this.speed;
  }

  Ball.prototype._update = function() {
    var collision, i, j, len, len1, object;
    collision = false;
    for (i = 0, len = objects.length; i < len; i++) {
      object = objects[i];
      if (!(!collision && !(object instanceof Ball) && this.checkCollision(object))) {
        continue;
      }
      this.speed.x *= -1.05;
      this.speed.y *= 1.05;
      for (j = 0, len1 = objects.length; j < len1; j++) {
        object = objects[j];
        if (object instanceof Player) {
          object.speed.y *= 1.05;
        }
      }
      if (this.speed.x > 0) {
        this.x(object.right());
      } else {
        this.x(object.left() - this.width());
      }
      collision = true;
    }
    if (this.speed.x < 0) {
      this.el.addClass("inverted");
    } else {
      this.el.removeClass("inverted");
    }
    return this.move();
  };

  Ball.prototype.collisionX = function(player) {
    var i, len, object, results;
    this.speed.x = -this.speed.x;
    if (player === leftPlayer || player === rightPlayer) {
      scores[player]++;
      results = [];
      for (i = 0, len = objects.length; i < len; i++) {
        object = objects[i];
        results.push(object.restart());
      }
      return results;
    }
  };

  Ball.prototype.collisionY = function() {
    return this.speed.y *= -0.95;
  };

  Ball.prototype.restart = function() {
    Ball.__super__.restart.call(this);
    if (this.defaultSpeed) {
      this.speed.x = this.defaultSpeed.x;
    }
    if (this.defaultSpeed) {
      this.speed.y = this.defaultSpeed.y;
    }
    return updateScores();
  };

  return Ball;

})(Object);

keyCodes = {
  w: 87,
  s: 83,
  p: 80
};

events = {
  other: {}
};

pongScreen = {
  width: 854,
  height: 480
};

leftPlayer = 0;

rightPlayer = 1;

scores = socket = objects = updateScores = null;

ready = paused = host = false;

$(function() {
  var frameCount, pausedText, scoreText;
  pausedText = $("#paused");
  pausedText.css("left", pongScreen.width / 2 - pausedText.width() / 2);
  scoreText = $("#score");
  updateScores = function(_scores) {
    scores = _scores || scores;
    if (host || (_scores != null)) {
      scoreText.text(scores[0] + " - " + scores[1]);
      scoreText.css("left", pongScreen.width / 2 - scoreText.width() / 2);
      if (host) {
        return socket.emit("scores", scores);
      }
    }
  };
  updateScores([0, 0]);
  objects = [
    new Player($("#player1"), true), new Player($("#player2")), new Ball($(".ball"), {
      x: 200,
      y: -200
    })
  ];
  frameCount = 0;
  setInterval(function() {
    var i, len, object;
    if (ready && !paused) {
      for (i = 0, len = objects.length; i < len; i++) {
        object = objects[i];
        object.update();
      }
      if (host) {
        if (++frameCount >= 1) {
          frameCount = 0;
          return socket.emit("ball", objects[2].x(), objects[2].y(), objects[2].speed);
        }
      }
    }
  }, 1000 / 60);
  socket = io(location.origin);
  socket.on("start", function(speed, _host) {
    var i, len, object;
    host = _host;
    for (i = 0, len = objects.length; i < len; i++) {
      object = objects[i];
      if (object instanceof Ball) {
        object.speed = speed;
      }
    }
    return ready = true;
  });
  socket.on("stop", function() {
    var i, len, object, results;
    ready = false;
    updateScores([0, 0]);
    results = [];
    for (i = 0, len = objects.length; i < len; i++) {
      object = objects[i];
      results.push(object.restart());
    }
    return results;
  });
  socket.on("ball", function(x, y, speed) {
    var ball;
    ball = objects[2];
    ball.x(pongScreen.width - x - ball.width());
    ball.y(y);
    return ball.speed = {
      x: -speed.x,
      y: speed.y
    };
  });
  socket.on("scores", function(scores) {
    return updateScores(scores.reverse());
  });
  socket.on("keydown", function(keyCode) {
    events.other[keyCode] = true;
    console.log("him: down:", keyCode, Date.now());
    if (keyCode === keyCodes.p) {
      paused = !paused;
      return $("#paused").toggle();
    }
  });
  socket.on("keyup", function(keyCode) {
    events.other[keyCode] = false;
    return console.log("him: up:", keyCode, Date.now());
  });
  $(document).on("keydown", function(event) {
    if (!events[event.keyCode]) {
      events[event.keyCode] = !events[event.keyCode];
      socket.emit("keydown", event.keyCode);
      console.log("me: down:", event.keyCode, Date.now());
      if (event.keyCode === keyCodes.p) {
        paused = !paused;
        return $("#paused").toggle();
      }
    }
  });
  return $(document).on("keyup", function(event) {
    if (events[event.keyCode]) {
      events[event.keyCode] = false;
      socket.emit("keyup", event.keyCode);
      return console.log("me: up:", event.keyCode, Date.now());
    }
  });
});
