// Generated by CoffeeScript 1.9.1
var Ball, Object, Player, events, keyCodes, leftPlayer, player1, player2, pongScreen, rightPlayer, scores,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object = (function() {
  function Object(el) {
    this.el = el;
  }

  Object.prototype.color = function(color) {
    if (color != null) {
      return this.el.css("background-color", color);
    } else {
      return this.el.css("background-color");
    }
  };

  Object.prototype.x = function(x) {
    if (x != null) {
      this.el.css("left", x + "px");
    }
    return parseFloat(this.el.css("left"));
  };

  Object.prototype.y = function(y) {
    if (y != null) {
      this.el.css("bottom", y + "px");
    }
    return parseFloat(this.el.css("bottom"));
  };

  Object.prototype.move = function(speed) {
    var finalX, finalY;
    speed = speed || this.speed || {
      x: 0,
      y: 0
    };
    finalY = this.y() + speed.y * this.delta / 1000;
    finalX = this.x() + speed.x * this.delta / 1000;
    if (finalY < 0) {
      this.y(0);
      this.collisionY();
    } else if (finalY + this.height() > pongScreen.height) {
      this.y(pongScreen.height - this.height());
      this.collisionY();
    } else {
      this.y(finalY);
    }
    if (finalX < 0) {
      this.x(0);
      return this.collisionX(leftPlayer);
    } else if (finalX + this.width() > pongScreen.width) {
      this.x(pongScreen.width - this.width());
      return this.collisionX(rightPlayer);
    } else {
      return this.x(finalX);
    }
  };

  Object.prototype.update = function() {
    if (this.updated == null) {
      this.updated = Date.now();
      return;
    }
    this.delta = Date.now() - this.updated;
    this._update();
    return this.updated = this.updated + this.delta;
  };

  Object.prototype._update = function() {};

  Object.prototype.width = function() {
    return this.el.width();
  };

  Object.prototype.height = function() {
    return this.el.height();
  };

  Object.prototype.left = function() {
    return this.x();
  };

  Object.prototype.right = function() {
    return this.x() + this.width();
  };

  Object.prototype.up = function() {
    return this.y() + this.height();
  };

  Object.prototype.down = function() {
    return this.y();
  };

  Object.prototype.checkCollision = function(o) {
    if (o.left() > this.right() || o.right() < this.left() || o.down() > this.up() || o.up() < this.down()) {
      return false;
    }
    return true;
  };

  Object.prototype.collisionX = function(p) {};

  Object.prototype.collisionY = function() {};

  return Object;

})();

Player = (function(superClass) {
  extend(Player, superClass);

  function Player(el, self) {
    this.el = el;
    Player.__super__.constructor.call(this, this.el);
    this.y(pongScreen.height / 2 - this.height() / 2);
    if ((self != null)) {
      this.x(20);
      this.color("green");
    } else {
      this.x(pongScreen.width - this.width() - 20);
      this.color("red");
    }
  }

  Player.prototype.moveUp = function() {
    return this.move({
      x: 0,
      y: 200
    });
  };

  Player.prototype.moveDown = function() {
    return this.move({
      x: 0,
      y: -200
    });
  };

  Player.prototype._update = function() {
    if (events[keyCodes.w]) {
      this.moveUp();
    }
    if (events[keyCodes.s]) {
      return this.moveDown();
    }
  };

  return Player;

})(Object);

Ball = (function(superClass) {
  extend(Ball, superClass);

  function Ball(el, speed1) {
    this.el = el;
    this.speed = speed1;
    Ball.__super__.constructor.call(this, this.el);
    this.y(pongScreen.height / 2);
    this.x(pongScreen.width / 2);
  }

  Ball.prototype._update = function() {
    this.move();
    if (this.checkCollision(player1) || this.checkCollision(player2)) {
      return this.speed.x = -this.speed.x;
    }
  };

  Ball.prototype.collisionX = function(p) {
    this.speed.x = -this.speed.x;
    if (p === leftPlayer) {
      scores[rightPlayer]++;
      return this.restart();
    } else if (p === rightPlayer) {
      scores[leftPlayer]++;
      return this.restart();
    }
  };

  Ball.prototype.collisionY = function() {
    return this.speed.y = -this.speed.y;
  };

  Ball.prototype.restart = function() {
    this.y(pongScreen.height / 2);
    return this.x(pongScreen.width / 2);
  };

  return Ball;

})(Object);

keyCodes = {
  w: 87,
  s: 83
};

events = {};

pongScreen = {
  width: 854,
  height: 480
};

leftPlayer = 0;

player1 = null;

player2 = null;

rightPlayer = 1;

scores = [0, 0];

$(function() {
  var ball;
  $(document).on("keydown", function(event) {
    return events[event.keyCode] = true;
  });
  $(document).on("keyup", function(event) {
    return events[event.keyCode] = false;
  });
  player1 = new Player($("#player1"), true);
  player2 = new Player($("#player2"));
  ball = new Ball($(".ball"), {
    x: 200,
    y: -200
  });
  return setInterval(function() {
    player1.update();
    return ball.update();
  }, 100 / 6);
});
