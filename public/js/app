class Object
  constructor: (@el) ->

  color: (color) ->
    if color?
      @el.css("background-color", color)
    else
      @el.css("background-color")

  x: (x) ->
    @el.css("left", x) if x?
    parseFloat @el.css "left"

  y: (y) ->
    @el.css("bottom", y + "px") if y?
    parseFloat @el.css "bottom"

  move: (speed) ->
    speed = speed || @speed || x: 0, y: 0

    finalY = @y() + speed.y * @delta / 1000
    if finalY < 0
      @y 0
    else if finalY + @height() > pongScreen.height
      @y pongScreen.height - @height()
    else
      @y finalY

  update: ->
    if !@updated?
      @updated = Date.now()
      return

    @delta = Date.now() - @updated

    @_update()

    @updated = @updated + @delta

  _update: ->

  width: ->
    @el.width()

  height: ->
    @el.height()

  left: ->
    @x()

  right: ->
    @x() + @width()

  up: ->
    @y() + @height()

  down: ->
   @y()

  checkColision: (o) ->
    if ( o.left() >= @left() && o.left() <= @right() || o.right() <=Â @right() && o.right() >= @left() ) && (o.up() <= @up() && o.up() >= @down() || o.down() >= @down() && o.down() <= @up() )
      return true
    return false



class Player extends Object
  constructor: (@el, @self) ->
    super @el
    @y(pongScreen.height / 2 - @height() / 2)

    if @self?
      @x(20)
      @color("green")
    else
      @x(pongScreen.width - @width() - 20)
      @color("red")

  moveUp: ->
    @move x: 0, y: 200

  moveDown: ->
    @move x: 0, y: -200

  _update: ->
    if @self?
      if events[keyCodes.w]
        @moveUp()
      if events[keyCodes.s]
        @moveDown()
    else
      if events.other[keyCodes.w]
        @moveUp()
      if events.other[keyCodes.s]
        @moveDown()



keyCodes =
  w: 87
  s: 83

events = other: {}
pongScreen = width: 854, height: 480

$ ->
  objects = [
    new Player($("#player1"), true)
    new Player($("#player2"))
  ]

  setInterval( ->
    object.update() for object in objects
  , 100 / 6)

  socket = io "http://localhost"

  socket.on "keydown", (data) ->
    events.other[data] = true

  socket.on "keyup", (data) ->
    events.other[data] = false

  $(document).on "keydown", (event) ->
    events[event.keyCode] = true
    socket.emit "keydown", event.keyCode

  $(document).on "keyup", (event) ->
    events[event.keyCode] = false
    socket.emit "keyup", event.keyCode



class Ball extends Object
