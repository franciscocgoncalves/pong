class Object
  constructor: (@el) ->

  color: (color) ->
    if color?
      @el.css("background-color", color)
    else
      @el.css("background-color")

  x: (x) ->
    @el.css("left", x + "px") if x?    
    parseFloat @el.css "left"

  y: (y) ->
    @el.css("bottom", y + "px") if y?
    parseFloat @el.css "bottom"

  move: (speed) ->
    speed = speed || @speed || x: 0, y: 0
    
    finalY = @y() + speed.y * @delta / 1000
    finalX = @x() + speed.x * @delta / 1000            
                
    if finalY < 0 
      @y(0)
      @collisionY()
    else if finalY + @height() > pongScreen.height
      @y pongScreen.height - @height()
      @collisionY()
    else
      @y finalY
      
    if finalX < 0 
      @x(0)
      @collisionX(leftPlayer)
    else if finalX + @width() > pongScreen.width
      @x pongScreen.width - @width()
      @collisionX(rightPlayer)
    else
      @x finalX

  update: ->
    if !@updated?
      @updated = Date.now()
      return

    @delta = Date.now() - @updated

    @_update()

    @updated = @updated + @delta

  _update: ->

  width: ->
    @el.width()

  height: ->
    @el.height()

  left: ->
    @x()

  right: ->
    @x() + @width()

  up: ->
    @y() + @height()

  down: ->
   @y()

  checkCollision: (o) ->
    if(o.left() > @right() || o.right() < @left() || o.down() > @up() || o.up() < @down())
      return false
    return true
    
  collisionX: (p) ->
  
  collisionY: ->


class Player extends Object
  constructor: (@el, self) ->
    super @el
    @y(pongScreen.height / 2 - @height() / 2)

    if (self?)
      @x(20)
      @color("green")
    else
      @x(pongScreen.width - @width() - 20)
      @color("red")

  moveUp: ->
    @move x: 0, y: 200

  moveDown: ->
    @move x: 0, y: -200

  _update: ->
    if events[keyCodes.w]
      @moveUp()
    if events[keyCodes.s]
      @moveDown()



class Ball extends Object
  constructor: (@el, @speed) ->
    super @el
    @y(pongScreen.height / 2)
    @x(pongScreen.width /2)

  _update: ->    
    @move()
    if @checkCollision(player1) || @checkCollision(player2) 
      @speed.x = - @speed.x
    
  collisionX: (p) ->
    @speed.x = - @speed.x
    
    if p == leftPlayer
      scores[rightPlayer]++
      @restart()
    else if p == rightPlayer
      scores[leftPlayer]++
      @restart()
    
  collisionY: ->
    @speed.y = - @speed.y
    
  restart: ->
    @y(pongScreen.height / 2)
    @x(pongScreen.width /2)



keyCodes =
  w: 87
  s: 83

events = {}
pongScreen = width: 854, height: 480
leftPlayer = 0
player1 = null
player2 = null
rightPlayer = 1
scores = [0, 0]

$ ->
  $(document).on "keydown", (event) ->
    events[event.keyCode] = true

  $(document).on "keyup", (event) ->
    events[event.keyCode] = false

  player1 = new Player($("#player1"), true)
  player2 = new Player($("#player2"))
  ball = new Ball($(".ball"), {x: 200, y: -200})
  
  setInterval( ->
    player1.update()
    ball.update()
  , 100 / 6)

