// Generated by CoffeeScript 1.9.1
var Ball,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Ball = (function(superClass) {
  extend(Ball, superClass);

  function Ball(el, speed, gm) {
    this.el = el;
    this.speed = speed;
    this.gm = gm;
    this.defaultSpeed = {
      x: this.speed.x,
      y: this.speed.y
    };
    Ball.__super__.constructor.call(this, this.el, this.gm);
  }

  Ball.prototype._update = function() {
    var collision, i, j, len, len1, object, ref, ref1;
    collision = false;
    ref = this.gm.objects;
    for (i = 0, len = ref.length; i < len; i++) {
      object = ref[i];
      if (!(!collision && !(object instanceof Ball) && this.checkCollision(object))) {
        continue;
      }
      this.speed.x *= -1.05;
      this.speed.y *= 1.05;
      this.speed.y += (object.currentSpeed.y || 0) * 0.25;
      ref1 = this.gm.objects;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        object = ref1[j];
        if (object instanceof Player) {
          object.speed.y *= 1.05;
        }
      }
      if (this.speed.x > 0) {
        this.x(object.right());
      } else {
        this.x(object.left() - this.width());
      }
      collision = true;
    }
    if (this.speed.x < 0) {
      this.el.addClass("inverted");
    } else {
      this.el.removeClass("inverted");
    }
    return this.move();
  };

  Ball.prototype.collisionX = function(player) {
    var i, len, object, ref, results;
    this.speed.x = -this.speed.x;
    if (player === this.gm.leftPlayer || player === this.gm.rightPlayer) {
      this.gm.scores[(player + 1) % 2]++;
      ref = this.gm.objects;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        object = ref[i];
        results.push(object.restart());
      }
      return results;
    }
  };

  Ball.prototype.collisionY = function() {
    return this.speed.y *= -0.95;
  };

  Ball.prototype.restart = function() {
    Ball.__super__.restart.call(this);
    this.speed.x = this.defaultSpeed.x;
    this.speed.y = this.defaultSpeed.y;
    return this.gm.updateScores();
  };

  return Ball;

})(Object);
