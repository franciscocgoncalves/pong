// Generated by CoffeeScript 1.9.1
var Network;

Network = (function() {
  function Network(gm, events) {
    this.gm = gm;
    this.events = events;
    this.host = false;
    this.socket = null;
    this.initSocket();
  }

  Network.prototype.emitScores = function(scores) {
    if (this.host) {
      return this.socket.emit("scores", scores);
    }
  };

  Network.prototype.emitBall = function(ball) {
    if (this.host) {
      return this.socket.emit("ball", ball.x(), ball.y(), ball.speed);
    }
  };

  Network.prototype.initSocket = function() {
    var self;
    this.socket = io(location.origin);
    self = this;
    this.socket.on("start", function(speed, _host) {
      self.host = _host;
      self.gm.startGame(speed);
      return self.gm.ready = true;
    });
    this.socket.on("stop", function() {
      self.gm.ready = false;
      self.gm.updateScores([0, 0]);
      return self.gm.restart();
    });
    this.socket.on("ball", function(x, y, speed) {
      var ball;
      ball = self.gm.objects[2];
      ball.x(pongScreen.width - x - ball.width());
      ball.y(y);
      return ball.speed = {
        x: -speed.x,
        y: speed.y
      };
    });
    this.socket.on("scores", function(scores) {
      return self.gm.updateScores(scores.reverse());
    });
    this.socket.on("keydown", function(keyCode) {
      self.events.events.other[keyCode] = true;
      console.log("him: down:", keyCode, Date.now());
      if (keyCode === self.events.keyCodes.p) {
        return self.gm.pause();
      }
    });
    return this.socket.on("keyup", function(keyCode) {
      self.events.events.other[keyCode] = false;
      return console.log("him: up:", keyCode, Date.now());
    });
  };

  return Network;

})();
