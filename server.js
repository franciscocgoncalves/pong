// Generated by CoffeeScript 1.9.1
var Hapi, SocketIO, exec, isDev, startServer;

exec = require("child_process").exec;

Hapi = require("hapi");

SocketIO = require("socket.io");

isDev = process.argv[2];

exec("npm i", function() {
  if (isDev) {
    exec("jade -w .");
    exec("sass -w .");
    return exec("coffeescript-concat -I ./public/js -o ./public/js/app", function() {
      return exec("coffee -cb ./public/js/app", function() {
        return startServer();
      });
    });
  } else {
    return startServer();
  }
});

startServer = function() {
  var games, io, server;
  server = new Hapi.Server();
  server.connection({
    address: "0.0.0.0",
    port: 80
  });
  games = {};
  io = SocketIO.listen(server.listener);
  io.on("connection", function(socket) {
    var found, game, i, id, len;
    found = false;
    for (id in games) {
      game = games[id];
      if (!(game.length < 2)) {
        continue;
      }
      found = true;
      game.push(socket);
      socket.gameId = id;
      for (i = 0, len = game.length; i < len; i++) {
        socket = game[i];
        socket.emit("start");
      }
    }
    if (!found) {
      games[socket.id] = [socket];
      socket.gameId = socket.id;
    }
    socket.on("keydown", function(data) {
      var j, len1, ref, results, s;
      console.log(socket.id, "down:", data);
      ref = games[socket.gameId];
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        s = ref[j];
        if (s.id !== socket.id) {
          results.push(s.emit("keydown", data));
        }
      }
      return results;
    });
    return socket.on("keyup", function(data) {
      var j, len1, ref, results, s;
      console.log(socket.id, "up:", data);
      ref = games[socket.gameId];
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        s = ref[j];
        if (s.id !== socket.id) {
          results.push(s.emit("keyup", data));
        }
      }
      return results;
    });
  });
  server.route({
    method: "GET",
    path: "/",
    config: {
      handler: {
        file: "./public/templates/index.html"
      }
    }
  });
  server.route({
    method: "GET",
    path: "/{path*}",
    config: {
      handler: {
        directory: {
          path: "./public/"
        }
      }
    }
  });
  return server.start(function() {
    return console.log("Server running at:", server.info.uri);
  });
};
